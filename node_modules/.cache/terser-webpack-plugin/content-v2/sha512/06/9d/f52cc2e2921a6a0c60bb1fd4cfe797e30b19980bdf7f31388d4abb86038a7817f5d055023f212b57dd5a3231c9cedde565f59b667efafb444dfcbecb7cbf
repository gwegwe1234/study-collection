{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{483:function(a,t,_){\"use strict\";_.r(t);var r=_(0),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[_(\"h1\",{attrs:{id:\"java\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java\"}},[a._v(\"#\")]),a._v(\" Java\")]),a._v(\" \"),_(\"p\"),_(\"div\",{staticClass:\"table-of-contents\"},[_(\"ul\",[_(\"li\",[_(\"a\",{attrs:{href:\"#_1-객체지향언어의-특징\"}},[a._v(\"1. 객체지향언어의 특징\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_2-객체와-클래스의-관계\"}},[a._v(\"2. 객체와 클래스의 관계\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_3-추상클래스와-인터페이스의-차이점\"}},[a._v(\"3. 추상클래스와 인터페이스의 차이점\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_4-자바-디자인-패턴-방식\"}},[a._v(\"4. 자바 디자인 패턴 방식\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_5-string-stringbuffer의-차이점\"}},[a._v(\"5. String/StringBuffer의 차이점\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_6-java-thread-구현하는-방법\"}},[a._v(\"6. Java Thread 구현하는 방법\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_7-singlethread와-multithread의-사례와-차이점\"}},[a._v(\"7. singleThread와 multiThread의 사례와 차이점\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_8-자바에서-다형성\"}},[a._v(\"8. 자바에서 다형성\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_9-callbyvalue-callbyreference-차이점\"}},[a._v(\"9. callByvalue , callByreference 차이점\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_10-컴파일언어와-인터프리터-언어의-차이점\"}},[a._v(\"10. 컴파일언어와 인터프리터 언어의 차이점\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_11-jvm의-기능\"}},[a._v(\"11. JVM의 기능\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_12-자바플랫폼\"}},[a._v(\"12. 자바플랫폼\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_13-가비지컬렉션에-대해-설명하시오\"}},[a._v(\"13. 가비지컬렉션에 대해 설명하시오.(*)\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_14-맵-셋-어레이리스트-스택-큐-자바의-자료구조\"}},[a._v(\"14. 맵, 셋, 어레이리스트, 스택, 큐(자바의 자료구조)\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_15-int와-integer의-차이\"}},[a._v(\"15. int와 Integer의 차이\")])]),_(\"li\",[_(\"a\",{attrs:{href:\"#_16-접근제어자\"}},[a._v(\"16. 접근제어자\")])])])]),_(\"p\"),a._v(\" \"),_(\"h3\",{attrs:{id:\"_1-객체지향언어의-특징\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-객체지향언어의-특징\"}},[a._v(\"#\")]),a._v(\" 1. 객체지향언어의 특징\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"객체 : 상태와 행동으로 구분\")]),a._v(\" \"),_(\"li\",[a._v(\"객체지향언어의 특징으로는 추상화, 캡슐화, 상속, 다형성이 있다.\")]),a._v(\" \"),_(\"li\",[a._v(\"추상화는 객체간 공통되는 정보를 간추려 클래스로 구성하는 것이고 캡슐화는 정보은닉을 통해 데이터를 보호할 수 있다.\")]),a._v(\" \"),_(\"li\",[a._v(\"상속은 부모클래스에서 기능이나 정보를 상속받아 사용할 수 있고 추가적으로 더 사용할 수 있어 유지보수가 용이하다. (코드의 재사용성, 확장성)\")]),a._v(\" \"),_(\"li\",[a._v(\"다형성은 부모클래스로 상속을 받아 똑같은 메소드 실행시에도 접근하는 위치에 따라 데이터가 다르게 나올 수\\n있도록 하는 것이다.\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_2-객체와-클래스의-관계\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-객체와-클래스의-관계\"}},[a._v(\"#\")]),a._v(\" 2. 객체와 클래스의 관계\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"클래스는 객체를 만드는 틀이다. (-> 객체를 만들기 위해서는 클래스가 필요)\")]),a._v(\" \"),_(\"li\",[a._v(\"클래스를 만들때에는 객체의 기능과 속성등 내용을 알아야 클래스를 만들 수 있다.\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_3-추상클래스와-인터페이스의-차이점\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-추상클래스와-인터페이스의-차이점\"}},[a._v(\"#\")]),a._v(\" 3. 추상클래스와 인터페이스의 차이점\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"공통점 : 상속과 관련 , 상속시 추상메소드 오버라이딩 필수,객체 생성은 불가\")]),a._v(\" \"),_(\"li\",[a._v(\"차이점 :\")]),a._v(\" \"),_(\"li\",[_(\"ol\",[_(\"li\",[a._v(\"추상클래스는 추상메소드, 일반메소드, 멤버변수, 생성자 포함가능 다만 abstract 사용 <-> 인터페이스는 추상메소드와 상수만 포함\")])])]),a._v(\" \"),_(\"li\",[_(\"ol\",{attrs:{start:\"2\"}},[_(\"li\",[a._v(\"추상클래스는 단일 상속만가능(extends), 인터페이스는 다중 구현이 가능(implements)\")])])])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_4-자바-디자인-패턴-방식\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-자바-디자인-패턴-방식\"}},[a._v(\"#\")]),a._v(\" 4. 자바 디자인 패턴 방식\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"싱글톤 패턴 등등. (추가 공부)\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_5-string-stringbuffer의-차이점\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-string-stringbuffer의-차이점\"}},[a._v(\"#\")]),a._v(\" 5. String/StringBuffer의 차이점\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"String은 값을 변경할 수 없고(불변성) StringBuffer은 변경이 가능하다(가변성)\")]),a._v(\" \"),_(\"li\",[a._v(\"String은 문자열 연산이 많은 경우 성능이 좋지 않고, StringBuffer은 기존 객체 공간 부족시 버퍼 크기를 늘린다.\\n(String 계속 객체를 생성, StringBuffer은 한번만 객체 생성)\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_6-java-thread-구현하는-방법\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-java-thread-구현하는-방법\"}},[a._v(\"#\")]),a._v(\" 6. Java Thread 구현하는 방법\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"Thread를 클래스를 상속(extends)하여 run메소드 오버라이딩 , 하나만 상속할때 사용\")]),a._v(\" \"),_(\"li\",[a._v(\"Runnable 인터페이스를 사용(implements)하여 run메소드를 오버라이딩, 여러개 Thread 사용시 사용\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_7-singlethread와-multithread의-사례와-차이점\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-singlethread와-multithread의-사례와-차이점\"}},[a._v(\"#\")]),a._v(\" 7. singleThread와 multiThread의 사례와 차이점\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"singleThread - 프로세스 하나에 Thread 하나를 실행하는 방식, 실행 흐름이 한개\")]),a._v(\" \"),_(\"li\",[a._v(\"multiThread - 프로세스 하나에 여러 Thread를 실행하는 방식, 실행 흐름이 두개 이상\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_8-자바에서-다형성\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-자바에서-다형성\"}},[a._v(\"#\")]),a._v(\" 8. 자바에서 다형성\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"상속 시 부모타입의 객체에 자신의 멤버를 참조하여 사용하는 것\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_9-callbyvalue-callbyreference-차이점\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-callbyvalue-callbyreference-차이점\"}},[a._v(\"#\")]),a._v(\" 9. callByvalue , callByreference 차이점\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"callByvalue - 값에 의한 호출\")]),a._v(\" \"),_(\"li\",[a._v(\"callByreference - 주소값을 호출\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_10-컴파일언어와-인터프리터-언어의-차이점\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-컴파일언어와-인터프리터-언어의-차이점\"}},[a._v(\"#\")]),a._v(\" 10. 컴파일언어와 인터프리터 언어의 차이점\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"컴파일언어 - 소스코드를 전체를 컴파일하여 기계어로 번역해서 실행파일을 만들어 실행 예)Java, C\")]),a._v(\" \"),_(\"li\",[a._v(\"인터프리터 - 소스코드를 한줄씩 실행(탑다운방식), 기계어 번역이 없다. 예)JavaScript\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_11-jvm의-기능\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-jvm의-기능\"}},[a._v(\"#\")]),a._v(\" 11. JVM의 기능\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"Java Virtual Machine(자바가상머신), Java와 OS 사이에서 서로를 연결해주는 역할\")]),a._v(\" \"),_(\"li\",[a._v(\"JVM은 3가지 영역으로 분류\")]),a._v(\" \"),_(\"li\",[a._v(\"Method Area - 클래스 정보 저장\")]),a._v(\" \"),_(\"li\",[a._v(\"Call Stack - 메서드가 작업하는 동안 생기는 지역변수와 중간결과 등을 저장\")]),a._v(\" \"),_(\"li\",[a._v(\"Heap - 프로그램 실행과정에서 생기는 객체\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_12-자바플랫폼\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-자바플랫폼\"}},[a._v(\"#\")]),a._v(\" 12. 자바플랫폼\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"자바는 자바로 기술된 프로그램 개발 및 실행을 할 수 있는 소프트웨어 모임의 총칭이다.\")]),a._v(\" \"),_(\"li\",[a._v(\"자바 프로그램을 실행하기 위해서는 JVM과 표준 라이브러리, 컴파일러를 필요로 한다.\")]),a._v(\" \"),_(\"li\",[a._v(\"이 때의 환경을 제공하는 것이 자바 플랫폼이다.\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_13-가비지컬렉션에-대해-설명하시오\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-가비지컬렉션에-대해-설명하시오\"}},[a._v(\"#\")]),a._v(\" 13. 가비지컬렉션에 대해 설명하시오.(*)\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"메모리 관리 기법으로 프로그램이 동적으로 할당했던 메모리 영역 중에 사용되지 않는 영역을 제거하는 것을 말한다.\")]),a._v(\" \"),_(\"li\",[a._v(\"이를 통해 메모리 누수를 방지할 수 있다. 자바 프로그램 자동 메모리 관리\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_14-맵-셋-어레이리스트-스택-큐-자바의-자료구조\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_14-맵-셋-어레이리스트-스택-큐-자바의-자료구조\"}},[a._v(\"#\")]),a._v(\" 14. 맵, 셋, 어레이리스트, 스택, 큐(자바의 자료구조)\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"List - 순서가 있는 자료구조로 배열과 비슷한 구조. 내용이 순서대로 있는 arrayList와 주소값으로 연결되어 있는 linkedlist가 있다.\")]),a._v(\" \"),_(\"li\",[a._v(\"Stack - 마지막에 넣은 데이터를 가장 먼저 꺼낼 수 있는 자료구조(LIFO).\")]),a._v(\" \"),_(\"li\",[a._v(\"Queue: 데이터를 선입선출(FIFO)하는 자료구조.\")]),a._v(\" \"),_(\"li\",[a._v(\"Map: 순서가 없는 자료구조. 키와 밸류가 한 세트가 되어 키를 통해 값을 찾을 수 있다.\")]),a._v(\" \"),_(\"li\",[a._v(\"set: 순서가 없는 자료구조이며 중복을 허용하지 않는다.\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_15-int와-integer의-차이\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_15-int와-integer의-차이\"}},[a._v(\"#\")]),a._v(\" 15. int와 Integer의 차이\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"int - null 사용불가\")]),a._v(\" \"),_(\"li\",[a._v(\"Integer - null 사용가능\")])]),a._v(\" \"),_(\"h3\",{attrs:{id:\"_16-접근제어자\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_16-접근제어자\"}},[a._v(\"#\")]),a._v(\" 16. 접근제어자\")]),a._v(\" \"),_(\"p\",[a._v(\"접근제어자의 종류는 public, protected, default, private 가 있다.\")]),a._v(\" \"),_(\"ul\",[_(\"li\",[a._v(\"public은 모든 클래스에서 접근이 가능함을 의미한다.\")]),a._v(\" \"),_(\"li\",[a._v(\"protected는 같은 패키지 + 상속 클래스까지 사용 가능.\")]),a._v(\" \"),_(\"li\",[a._v(\"default 는 같은 패키지 안에서만 사용 가능.\")]),a._v(\" \"),_(\"li\",[a._v(\"private 클래스 내에서만 접근이 가능하다. 접근하려면 객체 생성 이후 set 메소드로 접근 가능하다.\")])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}