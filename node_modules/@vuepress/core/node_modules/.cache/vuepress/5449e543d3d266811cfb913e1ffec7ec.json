{"remainingRequest":"/Users/gwangtae/github/private-study/study-collection/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gwangtae/github/private-study/study-collection/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gwangtae/github/private-study/study-collection/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/gwangtae/github/private-study/study-collection/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/gwangtae/github/private-study/study-collection/docs/programming/total.md?vue&type=template&id=21c095d6&","dependencies":[{"path":"/Users/gwangtae/github/private-study/study-collection/docs/programming/total.md","mtime":1670995033997},{"path":"/Users/gwangtae/github/private-study/study-collection/node_modules/cache-loader/dist/cjs.js","mtime":1670995051724},{"path":"/Users/gwangtae/github/private-study/study-collection/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1670995055037},{"path":"/Users/gwangtae/github/private-study/study-collection/node_modules/cache-loader/dist/cjs.js","mtime":1670995051724},{"path":"/Users/gwangtae/github/private-study/study-collection/node_modules/vue-loader/lib/index.js","mtime":1670995055036},{"path":"/Users/gwangtae/github/private-study/study-collection/node_modules/@vuepress/markdown-loader/index.js","mtime":1670995051325}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "개발-관련-이것저것-정리" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#개발-관련-이것저것-정리" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 개발 관련 이것저것 정리")
      ]),
      _vm._v(" "),
      _c("p"),
      _c("div", { staticClass: "table-of-contents" }, [
        _c("ul", [
          _c("li", [
            _c("a", { attrs: { href: "#java-개념-정리" } }, [
              _vm._v("Java 개념 정리")
            ]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#자바-컴파일" } }, [
                  _vm._v("자바 컴파일")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#immutable-class" } }, [
                  _vm._v("Immutable Class")
                ])
              ]),
              _c("li", [
                _c(
                  "a",
                  {
                    attrs: {
                      href: "#string-vs-string-builder-vs-string-buffer"
                    }
                  },
                  [_vm._v("String vs String Builder vs String Buffer")]
                )
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#자바-직렬화-역직렬화" } }, [
                  _vm._v("자바 직렬화 & 역직렬화")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#자료구조" } }, [_vm._v("자료구조")])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#접근-제어자" } }, [
                  _vm._v("접근 제어자")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#자바-데이터-타입" } }, [
                  _vm._v("자바 데이터 타입")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#인터페이스" } }, [
                  _vm._v("인터페이스")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#자바-8-이후-추가된-기술들" } }, [
                  _vm._v("자바 8 이후 추가된 기술들")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#객체" } }, [_vm._v("객체")])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#제네릭-타입" } }, [
                  _vm._v("제네릭 타입")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#자바의-메모리-영역-스택-힙" } }, [
                  _vm._v("자바의 메모리 영역 (스택,힙)")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#call-by-ref-vs-call-by-value" } }, [
                  _vm._v("Call By Ref vs Call By Value")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#super-vs-this" } }, [
                  _vm._v("Super vs This")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#transient" } }, [
                  _vm._v("transient")
                ])
              ])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#스프링" } }, [_vm._v("스프링")]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#인터셉터-vs-필터" } }, [
                  _vm._v("인터셉터 vs 필터")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#스프링-mvc의-처리-과정" } }, [
                  _vm._v("스프링 MVC의 처리 과정")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#스프링-오토-컨피규레이션" } }, [
                  _vm._v("스프링 오토 컨피규레이션")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#spring-aop" } }, [
                  _vm._v("Spring AOP")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#spring-boot-2-0-변경점" } }, [
                  _vm._v("Spring Boot 2.0 ~ 변경점")
                ])
              ])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#oop" } }, [_vm._v("OOP")]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#oop의-4가지-특징" } }, [
                  _vm._v("OOP의 4가지 특징")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#oop의-5대-원칙-solid" } }, [
                  _vm._v("OOP의 5대 원칙 (SOLID)")
                ])
              ])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#react" } }, [_vm._v("React")]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#react-hook" } }, [
                  _vm._v("React Hook")
                ])
              ])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#cs" } }, [_vm._v("CS")]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#컴파일-언어-vs-스크립트-언어" } }, [
                  _vm._v("컴파일 언어 vs 스크립트 언어")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#개발-시-가장-중요한-점" } }, [
                  _vm._v("개발 시 가장 중요한 점")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#thread-vs-process" } }, [
                  _vm._v("Thread vs Process")
                ])
              ]),
              _c("li", [_c("a", { attrs: { href: "#db" } }, [_vm._v("DB")])])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#애자일-스크럼" } }, [
              _vm._v("애자일 & 스크럼")
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#테스트" } }, [_vm._v("테스트")])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#배포" } }, [_vm._v("배포")]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#helm" } }, [_vm._v("helm")])
              ])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#web" } }, [_vm._v("Web")]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#_10만명이-사용하는-시스템" } }, [
                  _vm._v("10만명이 사용하는 시스템")
                ])
              ])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#카프카" } }, [_vm._v("카프카")]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#카프카-구성" } }, [
                  _vm._v("카프카 구성")
                ])
              ]),
              _c("li", [
                _c(
                  "a",
                  { attrs: { href: "#카프카를-사용할때-생길-수-있는-문제" } },
                  [_vm._v("카프카를 사용할때 생길 수 있는 문제")]
                )
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#카프카를-사용했을-때-장점" } }, [
                  _vm._v("카프카를 사용했을 때 장점")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#주키퍼" } }, [_vm._v("주키퍼")])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#카프카-스트림즈" } }, [
                  _vm._v("카프카 스트림즈")
                ])
              ])
            ])
          ]),
          _c("li", [_c("a", { attrs: { href: "#msa" } }, [_vm._v("msa")])]),
          _c("li", [
            _c("a", { attrs: { href: "#reactive-programming" } }, [
              _vm._v("Reactive Programming")
            ]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#리액티브" } }, [_vm._v("리액티브")])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#함수형-프로그래밍이란" } }, [
                  _vm._v("함수형 프로그래밍이란?")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#스프링-웹플럭스" } }, [
                  _vm._v("스프링 웹플럭스")
                ])
              ])
            ])
          ]),
          _c("li", [
            _c("a", { attrs: { href: "#디자인-패턴" } }, [
              _vm._v("디자인 패턴")
            ]),
            _c("ul", [
              _c("li", [
                _c("a", { attrs: { href: "#빌더-패턴" } }, [
                  _vm._v("빌더 패턴")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#스트레티지-패턴" } }, [
                  _vm._v("스트레티지 패턴")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#템플릿-메소드-패턴" } }, [
                  _vm._v("템플릿 메소드 패턴")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#데코레이터-패턴" } }, [
                  _vm._v("데코레이터 패턴")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#플라이웨이트-패턴" } }, [
                  _vm._v("플라이웨이트 패턴")
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#싱글톤" } }, [_vm._v("싱글톤")])
              ])
            ])
          ])
        ])
      ]),
      _c("p"),
      _vm._v(" "),
      _c("h2", { attrs: { id: "java-개념-정리" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#java-개념-정리" } },
          [_vm._v("#")]
        ),
        _vm._v(" Java 개념 정리")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "자바-컴파일" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#자바-컴파일" } },
          [_vm._v("#")]
        ),
        _vm._v(" 자바 컴파일")
      ]),
      _vm._v(" "),
      _c("ul", [_c("li", [_vm._v("자바 파일을 클래스 파일로 변경해줌")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "immutable-class" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#immutable-class" } },
          [_vm._v("#")]
        ),
        _vm._v(" Immutable Class")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "불변 객체란 재할당은 가능하지만, 한번 할당하면 내부 데이터를 변경할 수 없는 객체"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("에를들어 String 클래스는 불변 객체이다.")]),
        _vm._v(" "),
        _c("li", [_vm._v("객체로 보자면 아래는 불변이 아닌 클래스")])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("MutablePerson")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n   "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n   "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" name"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    \n   "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("MutablePerson")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" name"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    \t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("age "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("name "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" name"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("ul", [
        _c("li", [_vm._v("위의 코드는 생성자를 통해 갑의 변경이 가능하다.")])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("ImmutablePerson")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("private")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("private")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" name"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    \n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("ImmutablePerson")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" name"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    \t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("age "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("name "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" name"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("ul", [
        _c("li", [_vm._v("요롷게 final 로 설정하면 불변 객체가 된다.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "장점 : 객체에 대한 신뢰도가 높아지고, 믿고 쓸 수 있다. 생성자나 세터의 방어 복사가 필요 없다. 멀티스레드에서 동기화 처리 없이 객체 공유가 가능"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "단점 : 객체가 가지는 값마다 새로운 객체가 필요해, 메모리 누수가 심할 수 있다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Animal")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    \n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("private")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Age")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Animal")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Age")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("age "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n    \n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Age")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getAge")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    \t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" age"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Age")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    \n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("private")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Age")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("value "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("void")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("setValue")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("value "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n    \n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("getValue")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    \t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("ul", [
        _c("li", [
          _vm._v(
            "추가로, Animal 클래스는 멤버변수가 final로 선언되어 있지만, 실제 Age 참조 타입은 불변객체가 아니므로, ANimal도 불변 객체가 아니다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "참조하고 있는 클래스도 불변 객체여야 상위 객체도 불변 객체가 된다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "string-vs-string-builder-vs-string-buffer" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#string-vs-string-builder-vs-string-buffer" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" String vs String Builder vs String Buffer")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "string" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#string" } }, [
          _vm._v("#")
        ]),
        _vm._v(" String")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("String 클래스는 불변(immutable) 클래스이다.")])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("public")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("String")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("implements")
            ]),
            _vm._v(" java"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("io"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Serializable")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Comparable")
            ]),
            _c("span", { pre: true, attrs: { class: "token generics" } }, [
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v("<")
              ]),
              _c("span", { pre: true, attrs: { class: "token class-name" } }, [
                _vm._v("String")
              ]),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(">")
              ])
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("CharSequence")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("/** The value is used for character storage. **/")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("private")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("final")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("char")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("ul", [
        _c("li", [
          _vm._v("실제 스트링을 들어가보면, final char로 선언 되어 있다.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "그로 인해 한번 할당한 문자열을 변경하는 것은 불가능하고, 더하기 연산을 해서 붙일 경우 새로운 객체가 생성되어 재할당 된다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "반복적으로 문자열을 이어 붙이면 Heap 영역에 참조를 잃은 문자열 객체가 계속해서 쌓이게 된다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "이런 String의 성능 이슈 개선을 위해 JDK 1.5 이상에서는 컴파일 단계에서 내부적으로 StringBuilder로 변경되어 동작한다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "string-builder" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#string-builder" } },
          [_vm._v("#")]
        ),
        _vm._v(" String Builder")
      ]),
      _vm._v(" "),
      _c("ul", [_c("li", [_vm._v("String Builder는 가변적이다.")])]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("abstract")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("AbstractStringBuilder")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("implements")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Appendable")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("CharSequence")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("/** The value is used for character storage **/")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("char")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" value"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("ul", [
        _c("li", [
          _vm._v(
            "append() 메소드를 호출하면, char[] 배열의 길이를 늘리고 같은 객체에 문자열을 더한다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "string-buffer" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#string-buffer" } },
          [_vm._v("#")]
        ),
        _vm._v(" String Buffer")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "String Buffer는 synchronized가 적용되어 멀티 스레드 환경에서 Thread Safe하게 동작한다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("즉 동기화를 지원하는 String Builder라고 생각하면 된다.")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "자바-직렬화-역직렬화" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#자바-직렬화-역직렬화" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 자바 직렬화 & 역직렬화")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "자바 직렬화란 자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도 사용할 수 있도록 바이트 형태로 데이터 변환하는 기술."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "역직렬화는 반대로 바이트로 변환된 데이터를 자바 객체로 바꾸는 것."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "자바 직렬화 조건 : java.io.Serializable 인터페이스를 상속받은 객체는 직렬화 할 수 있는 기본 조건을 가진다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("자바 직렬화는 방법은 java.io.ObjectOutputStream 객체를 이용")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "자바 역직렬화 조건 : 직렬화 대상이 된 객체의 클래스가 클래스 패스에 존재해야 하며 import 되어 있어야 한다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "자바 직렬화 대상 객체는 동일한 serialVersionUID를 가지고 있어야 한다. (필수로 적어줄 필요는 없다.)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "즉 직렬화는 자바내 객체를 json으로 보내는거고 역직렬화는 json 스트링으로 온 데이터를 자바 객체로 바꾸는 이런 방식"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "자료구조" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#자료구조" } },
          [_vm._v("#")]
        ),
        _vm._v(" 자료구조")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "List - 순서가 있는 자료구조로 배열과 비슷한 구조. 내용이 순서대로 있는 arrayList와 주소값으로 연결되어 있는 linkedlist가 있다. : 조회는 ArrayList가 빠르고, 삽입, 삭제는 LinkedList가 더 빠르다"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Stack - 마지막에 넣은 데이터를 가장 먼저 꺼낼 수 있는 자료구조(LIFO)."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Queue: 데이터를 선입선출(FIFO)하는 자료구조.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Map: 순서가 없는 자료구조. 키와 밸류가 한 세트가 되어 키를 통해 값을 찾을 수 있다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("set: 순서가 없는 자료구조이며 중복을 허용하지 않는다.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("tree : 탐색에 용이한 구조. 이진트리 같은게 있다.")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "접근-제어자" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#접근-제어자" } },
          [_vm._v("#")]
        ),
        _vm._v(" 접근 제어자")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "접근제어자의 종류는 public, protected, default, private 가 있다."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("public은 모든 클래스에서 접근이 가능함을 의미한다.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("protected는 같은 패키지 + 상속 클래스까지 사용 가능.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("default 는 같은 패키지 안에서만 사용 가능.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "private 클래스 내에서만 접근이 가능하다. 접근하려면 객체 생성 이후 set 메소드로 접근 가능하다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "자바-데이터-타입" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#자바-데이터-타입" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 자바 데이터 타입")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "기본형 (primitive type) : stack 메모리 영역에 실제 값을 저장하는 데이터 타입이며, boolean, char, int 등 8가지 종류가 있다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "참조형 (Non-primitive) : 기본형 외의 모든 타입. String, 클래스, 인터페이스, 어레이 등 모든 변수는 참조형 변수. 새로 만들때는 heap 메모리에 저장공간을 확보하며 항상 new로 정의. 실제 값은 heap 영역에 저장되고, stack 에는 메모리 주소만 저장. (참고로 자바는 변수를 복사하는 경우가 없고 무조건 참조)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "인터페이스" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#인터페이스" } },
          [_vm._v("#")]
        ),
        _vm._v(" 인터페이스")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("객체의 사용법을 정리해놓은 틀")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("인터페이스는 여러 클래스의 사용 방법이 같음을 보장")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "그렇기 때문에 자신을 implement 하는 클래스들에게 메서드 구현을 강제"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "예를들어 List 인터페이스 를 implement 하는 클래스 들인 ArrayList, LinkedList는 공통적으로 add(), clear(), indexOf(), get() 등의 메서드를 가지고 있다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "자바-8-이후-추가된-기술들" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#자바-8-이후-추가된-기술들" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 자바 8 이후 추가된 기술들")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "스트림 처리 가능 (java.util.stream 추가) -> filter, map, reduce 같은 기능들 추가로 가독성이 좋아지고, 병렬처리도 쉬워졌다. (추가로 내부 로직들을 숨겨서 사용자가 내부 로직을 알 필요가 없게 된 부분들.. 이 있다. 동작 파라미터화 인가?)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "동작 파라미터화로 메소드에 코드 전달 가능 -> predicate 같은거로 개발에 좀 (기능 자체를 변수로 넘겨줄 수 있다. 즉 매번 코드를 재작성이 가능. 람다사용)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("람다(익명함수)가 추가됨. (가독성이 좋아짐)")]),
        _vm._v(" "),
        _c("li", [_vm._v("메소드 참조 사용 가능 (역시 가독성 좋음)")]),
        _vm._v(" "),
        _c("li", [_vm._v("디폴트 메소드 : 인터페이스에 코드 추가 가능")]),
        _vm._v(" "),
        _c("li", [_vm._v("Optional 추가로 null safe하게 처리 가능")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "date time 추가 (LocalDate, LocalTime, Instant, Duration, Period)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("httpClient 추가 (자바 11)")]),
        _vm._v(" "),
        _c("li", [_vm._v("var 키워드도 추가..")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "객체" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#객체" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 객체")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "자바에서 객체란 원시타입을 제외한 모든 변수들은 참조타입 (객체) 이다."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("null이 들어갈 수 있다.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "객체는 값이 들어가는게 아닌, 값이 담겨있는 메모리의 주소값을 갖고 있다."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("즉 다른 변수에 객체를 넣으면 그냥 통쨰로 바껴버림")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "객체를 final로 선언하면, 객체의 주소값은 불변이 되지만, 내부 값은 final로 설정되어 있지 않으면 값 변경이 가능하다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "제네릭-타입" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#제네릭-타입" } },
          [_vm._v("#")]
        ),
        _vm._v(" 제네릭 타입")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("매개변수화된 타입")]),
        _vm._v(" "),
        _c("li", [_vm._v("대표적으로 List 같은 컬렉션에서 사용된다.")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "자바의-메모리-영역-스택-힙" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#자바의-메모리-영역-스택-힙" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 자바의 메모리 영역 (스택,힙)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "메소드 영역 : static 변수, 전역변수, 코드에서 사용되는 class 정보 등이 올라감."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("스택 : 지역변수, 함수(메소드),")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "힙 : new 연산자를 통한 동작할당된 객체들이 저장되며, 가비지 컬렉션에 의해 메모리가 관리되어 진다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "call-by-ref-vs-call-by-value" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#call-by-ref-vs-call-by-value" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Call By Ref vs Call By Value")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("간단하게 자바 원시타입 vs 참조타입")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "원시타입은 직접 값을 변경하는 거고, 참조타입은 주소를 참조하는것, 즉 참조값은 메소드로 넘겨받아 값을 바꾸면, 기존 호출한곳의 값도 바뀐다 (주소값 통째로 옮겨지는거)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "super-vs-this" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#super-vs-this" } },
          [_vm._v("#")]
        ),
        _vm._v(" Super vs This")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "this 는 같은 클래스의 생성자를 호출하거나, 매개변수가 있는 생성자를 호출"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("super는 부모의 생성자를 호출")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "transient" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#transient" } },
          [_vm._v("#")]
        ),
        _vm._v(" transient")
      ]),
      _vm._v(" "),
      _c("ul", [_c("li", [_vm._v("transient 변수는 직렬화가 안된다.")])]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "스프링" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#스프링" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 스프링")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "인터셉터-vs-필터" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#인터셉터-vs-필터" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 인터셉터 vs 필터")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Filter와 Interceptor는 실행되는 시점이 다르다.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Filter는 Web Application에 등록을 하고, Interceptor는 Spring의 Context에 등록을 한다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "컨트롤러에 들어가기 전에 작업을 처리하기 위해 사용할 수 있다는 공통점이 있지만 호출되는 시점이 다르다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1.")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Filter")
            ]),
            _vm._v("는 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Dispatcher")
            ]),
            _vm._v(" servlet의 앞단에서 정보를 처리하고"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Interceptor")
            ]),
            _vm._v("는 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Dispatcher")
            ]),
            _vm._v(" servlet에서 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Handler")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Controller")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("로 가기 전에 정보를 처리한다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2.")
            ]),
            _vm._v(" 또한 필터는 J2EE 표준 스펙에 정의 되어 있는 기능이며"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" 인터셉터의 경우는 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Spring")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Framework")
            ]),
            _vm._v("에서 자체적으로 제공하는 기능이라고 한다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("h3", { attrs: { id: "스프링-mvc의-처리-과정" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#스프링-mvc의-처리-과정" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 스프링 MVC의 처리 과정")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1.")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("DispatcherServlet")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" 어플리케이션으로 들어오는 모든 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Request")
            ]),
            _vm._v("를 받는 관문이다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" \n         "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Request")
            ]),
            _vm._v("를 실제로 처리할 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Controller")
            ]),
            _vm._v(" 에게 전달하고 그 결과값을 받아서 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("View")
            ]),
            _vm._v(
              "에게 전달하여 적절한 응답등 생성할 수 있도록 흐름을 제어한다"
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2.")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("HandlerMapping")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Request")
            ]),
            _vm._v(" URL 각각을 어떤 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Controller")
            ]),
            _vm._v(" 가 실제로 처리할 것인지 찾아주는 역할을 한다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3.")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Controller")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Request")
            ]),
            _vm._v("를 직접 처리한 후 그 결과를 다시 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("DispatcherServlet")
            ]),
            _vm._v(" 에게 돌려준다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4.")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("ModelAndView")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Controller")
            ]),
            _vm._v("가 처리한 결과와 그 결과를 보여줄 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("View")
            ]),
            _vm._v("에 관한 정보를 담고 있는 객체이다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("5.")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("ViewResolver")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("View")
            ]),
            _vm._v(" 관련 정보를 갖고 실제 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("View")
            ]),
            _vm._v("를 찾아주는 역할을 한다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("6.")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("View")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Controller")
            ]),
            _vm._v("가 처리한 결과값을 보여줄 "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("View")
            ]),
            _vm._v("를 생성한다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("h3", { attrs: { id: "스프링-오토-컨피규레이션" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#스프링-오토-컨피규레이션" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 스프링 오토 컨피규레이션")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "configuration으로 빈들 정의해주고, spring.factories 파일에 autoconfiguration 설정으로 넣어준다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "그리고 maven으로 해당 라이브러리 추가해주면, 오토 configuration을 스프링 부트 enableAutoConfiguration에서 설정해서 진행한다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "spring-aop" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#spring-aop" } },
          [_vm._v("#")]
        ),
        _vm._v(" Spring AOP")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("횡단 관심사")]),
        _vm._v(" "),
        _c("li", [_vm._v("공통적인 로그처리 같은거 할 때 좋다.")]),
        _vm._v(" "),
        _c("li", [_vm._v("에러처리도 좋다.")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "spring-boot-2-0-변경점" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#spring-boot-2-0-변경점" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Spring Boot 2.0 ~ 변경점")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("WebFlux 지원")]),
        _vm._v(" "),
        _c("li", [_vm._v("Embedded Netty 지원")]),
        _vm._v(" "),
        _c("li", [_vm._v("기본 데이터 소스 HikariCP로 변경")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("기타 third party 라이브러리 변경됨 (톰캣, JUnit 등등")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Auto Configuration에 Kafka Streams Support 지원")]),
        _vm._v(" "),
        _c("li", [_vm._v("JUnit 5 로 변경 (2.1 버전)")]),
        _vm._v(" "),
        _c("li", [_vm._v("짜잘한 actuator health 엔드포인트가 좀더 세분화됨")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "oop" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#oop" } }, [
          _vm._v("#")
        ]),
        _vm._v(" OOP")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "oop의-4가지-특징" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#oop의-4가지-특징" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" OOP의 4가지 특징")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "추상화 : 구체적인 사물들의 공통적인 특징을 파악해서 이를 하나의 개념으로 다루는 것"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "캡슐화 : 정보 은닉으로 필요가 없는 정부는 외부에서 적ㅂ근하지 못하도록 제한한느 것"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "일반화 관계 : 여러 개체들이 가진 공통된 특성을 부각시켜 하나의 개념이나 법칙으로 성립시키는 과정"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "다형성 : 서로 다른 클래스의 객체가 같은 메세지를 받았을 때 각자의 방식으로 동작하는 능력"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "oop의-5대-원칙-solid" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#oop의-5대-원칙-solid" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" OOP의 5대 원칙 (SOLID)")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("S: 단일 책임 원칙(SRP, Single Responsibility Principle)\n"),
          _c("ul", [_c("li", [_vm._v("객체는 단 하나의 책임만 가져야 한다.")])])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("O: 개방-폐쇄 원칙(OCP, Open Closed Principle)\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되어야 한다."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("L: 리스코프 치환 원칙(LSP, Liskov Substitution Principle)\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "일반화 관계에 대한 이야기며, 자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 한다."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("I: 의존 역전 원칙(DIP, Dependency Inversion Principle)\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 것이다."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "D: 인터페이스 분리 원칙(ISP, Interface Segregation Principle)\n"
          ),
          _c("ul", [
            _c("li", [
              _vm._v(
                "인터페이스를 클라이언트에 특화되도록 분리시키라는 설계 원칙이다."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "react" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#react" } }, [
          _vm._v("#")
        ]),
        _vm._v(" React")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "react-hook" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#react-hook" } },
          [_vm._v("#")]
        ),
        _vm._v(" React Hook")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "기존 클래스 컴포넌트에서만 사용가능하던 componentDidMount 같은걸 함수형 component에서도 쓸 수 있게 되는거 같음"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "다양한 함수들이 있는거 같다. useEffect(componentDidMount와 같은역할)..등등?"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("React Hook 은 함수형 Component에서만 사용이 가능하다")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Custom Hook 도 만들 수 있다.")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "cs" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#cs" } }, [
          _vm._v("#")
        ]),
        _vm._v(" CS")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "컴파일-언어-vs-스크립트-언어" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#컴파일-언어-vs-스크립트-언어" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 컴파일 언어 vs 스크립트 언어")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "컴파일 언어 : c나 c++, go같은애들은 빌드(컴파일)를 하게되면 실행파일 (binary파일)이 나온다. 즉 빌드되는 환경에 따라서 실행파일이 될수도, 안될수도있다.\n예를들어 맥환경에서 go를 빌드하면, 같은 맥환경에서는 실행이 되지만, 리눅스에서는 실행이안된다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "스크립트 언어 : 스크립트 언어는 빌드시 특정 vm위에서 돌게되서 environment safe 하다. 즉 어느환경에서 돌리건 상관없이 다 vm위에서 돌아가서 맥에서 돌리건, 리눅스에서 돌리건 상관없다. (python, ruby)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "예외 케이스 : 자바같은 경우는 약간 짬뽕된 언어로, compile을 하긴 하는데, 컴파일 실행 시 바이너리 파일이 나오는게 아니라 .class파일(byte code)이 나온다. 그 .class파일을 jvm환경에서 돌려 역시 아무대서나 돌려도 된다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "도커 적용 : 이걸 docker 환경에서 적용해 보면, dockerfile 생성시  environment safe 한 언어들은 로컬환경에서 빌드하고, 빌드한 파일을 docker image로 옮길 수 있지만, go나 c같은 언어들은 도커파일 내부에서 빌드를 진행해야한다.\n여기에 추가적으로 특이한 케이스가 node 인데, node는 그자체는 precompile언어이지만, 라이브러리중에 c++로 구현된게 있어서 도커파일 내부에서 빌드를 보통 진행한다. (npm)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "개발-시-가장-중요한-점" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#개발-시-가장-중요한-점" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 개발 시 가장 중요한 점")
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [_vm._v("테스트코드 작성")]),
        _vm._v(" "),
        _c("li", [_vm._v("가독성 좋은 코드")]),
        _vm._v(" "),
        _c("li", [_vm._v("재활용 가능한 코드")]),
        _vm._v(" "),
        _c("li", [_vm._v("중복이 없는 코드")]),
        _vm._v(" "),
        _c("li", [_vm._v("분석이 쉬운 & 변경이 쉬운 코드")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "thread-vs-process" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#thread-vs-process" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Thread vs Process")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Process : 메모리에 올라와 실행되고 있는 프로그램의 인스턴스(독립적인 개체)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Thread : 프로세스 내에서 실행되는 여러 흐름의 단위")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("자바 스레드(Java Thread) 란\n"),
          _c("ul", [
            _c("li", [
              _vm._v(
                "일반 스레드와 거의 차이가 없으며, JVM가 운영체제의 역할을 한다."
              )
            ]),
            _vm._v(" "),
            _c("li", [
              _vm._v(
                "자바에는 프로세스가 존재하지 않고 스레드만 존재하며, 자바 스레드는 JVM에 의해 스케줄되는 실행 단위 코드 블록이다."
              )
            ])
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "멀티 프로세스 : 멀티 프로세싱이란 하나의 응용프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업(태스크)을 처리하도록 하는 것 (컨텍스트 스위칭 오버헤드 문제가 발생 할 수 있다.)"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "멀티 쓰레드 : 하나의 응용프로그램을 여러 개의 스레드로 구성하고 각 스레드로 하여금 하나의 작업을 처리하도록 하는 것 (동시성..) -> 자원을 효율적으로 쓸 수있지만, 코딩하기 어렵고 디버깅이 어렵다. 자원 공유 문제 해결같은거도 까다로움"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "멀티 프로세스 대신 멀티 스레드를 사용하는 것의 의미? : 쉽게 설명하면, 프로그램을 여러 개 키는 것보다 하나의 프로그램 안에서 여러 작업을 해결하는 것"
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("멀티 쓰레드는 각각의 스택을 가진다. but 메모리는 공유")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "db" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#db" } }, [
          _vm._v("#")
        ]),
        _vm._v(" DB")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "index" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#index" } }, [
          _vm._v("#")
        ]),
        _vm._v(" index")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "모든 테이블을 조회하면 시간이 오래걸리므로, 미리 indexing 해놓는거."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "index는 키 밸류로 되어 있고, 정렬되어 있어 조회가 매우 빠르다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "대신 추가할 때 인덱스에도 정보를 넣어야 하니까 저장은 느리다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "즉 조회를 극대화해 저장능력을 조금 포기하는것 대게 B, B+트리로 되어 있다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "애자일-스크럼" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#애자일-스크럼" } },
          [_vm._v("#")]
        ),
        _vm._v(" 애자일 & 스크럼")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "폭포수 vs 애자일 : 많은 요구사항이 나오는 상황에서 충분한 요구사항이 완벽하게 나오지 않는 이상 폭포수는 어렵다. TDD처럼 애자일에 맞는 방법을 사용하면, 요구사항이 변경돼도 계속 테스트코드를 수정하면서 메인 로직을 조금씩 수정하면 시간이 단축. 이걸 실행하려면 객체지향적인 수정이 쉬운 코드를 작성해야 한다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "폭포수 방식은 위에서 명령하달이 내려오므로, 수동적으로 일하게 된다. (커뮤니 케이션 부족)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "테스트" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#테스트" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 테스트")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "TDD로 개발하다보면, 자연스럽게 작은 단위의 테스트로 분리하게 되고, 그런 결과는 객체지향적인 코드로 자연스럽게 나타날 수 있다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("TDD 는 실패 -> 간단한 성공 -> 리팩토링 의 반복으로 구성한다.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "TDD는 테스트 구성에 신경쓰는거면, BDD는 요구사항에 맞춘 기능별 테스트를 작성한다. 즉 하나의 기능이 테스트 하나. 추가로 시나리오로 여러개의 데이터 테스트가 가능하다"
          )
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _vm._v(
              " 큰 문제를 작게 작게 쪼개서 개발을 시작하기가 용이\n      "
            ),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("->")
            ]),
            _vm._v(
              " 여러 개의 단위로 테스트를 쪼개서 무엇을 개발해야될지 좀 더 파악이 잘 된다"
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(
              "\n 변화에 대한 대처가 용이하다\n 쉴 때는 테스트를 돌려보면서 개발을 안한 부분이 어딘지 파악이 용이\n \n테스트 케이스를 만들 땐"
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(
              " 어떤 값을 넣었을 때 해당 값을 통해 원하는 값이 도출되는지 확인한다"
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("->")
            ]),
            _vm._v(
              " 결국 테스트 케이스를 만들다 보면 어떻게 하면 테스트를 쉽게 확인 할 수 있을 고민 \n"
            ),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("->")
            ]),
            _vm._v(" 실제 변화가 일어나는 부분"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("값"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("과 변화가 일어나지 않는 부분"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("로직"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("을 분리하는 객체 지향적 설계를 하게 된다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n\n 테스트 케이스를 만들어 통과시켜 놓으면"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(
              " 그 테스트 케이스 자체가 입력타입과 출력타입의 표준이 된다\n\n"
            ),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("--")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("->")
            ]),
            _vm._v(" TDD를 적용해 개발하면 조금더 품질이 보장된 코드가 됨"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" 의식적인 리펙토링 절차가 꼭 필요하다\n")
          ])
        ])
      ]),
      _c("h2", { attrs: { id: "배포" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#배포" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 배포")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "helm" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#helm" } }, [
          _vm._v("#")
        ]),
        _vm._v(" helm")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Chart 만든다")]),
        _vm._v(" "),
        _c("li", [_vm._v("Chart는 Helm에서 사용하는 패키지의 포맷")])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("TIP")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Chart.yaml: Chart의 정보를 정의하는 파일로 Chart의 이름, 버전 등을 정의"
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("charts: dependency chart 파일들이 해당 디렉토리 아래에 생김")
        ]),
        _vm._v(" "),
        _c("p", [_vm._v("template: k8s 리소스 템플릿이 보관되는 디렉토리")]),
        _vm._v(" "),
        _c("p", [_vm._v("NOTES.txt: Chart를 설치 후 출력되는 내용을 정의")]),
        _vm._v(" "),
        _c("p", [_vm._v("*.yaml: 클러스터에 띄울 리소스 템플릿 파일들")]),
        _vm._v(" "),
        _c("p", [_vm._v("values.yaml: 템플릿에 사용될 변수들을 모아놓은 파일")])
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "즉 배포할 틀(템플릿) 을 만들고, values로 값들을 환경에 맞게 넣어준다."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("매번 새롭게 배포해주므로, 자동배포시에 쓰기 좋다.")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "web" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#web" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Web")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "_10만명이-사용하는-시스템" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_10만명이-사용하는-시스템" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 10만명이 사용하는 시스템")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("간단하게 정리하면, 시스템에 트래픽이 많으면, "),
          _c("code", [
            _vm._v(
              "디비 분리, 클라 분리, 로드밸런서 추가, 서버를 여러대 두기, CDN 이용, 데이터베이스 계층화, 캐시 사용"
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _vm._v("명 이용\n기본 구성 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" 클라이언트 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("-")
            ]),
            _vm._v(" API "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("-")
            ]),
            _vm._v(" 디비\n처음엔 이 세 개를 다 같은 서버에 실행하는게 좋다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("->")
            ]),
            _vm._v(" 개발환경이랑 거의 동일"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" 구성하기 간단\n\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("10")
            ]),
            _vm._v("명 이용\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("10")
            ]),
            _vm._v("명 쯤 되면 디비를 분리하자\n\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("100")
            ]),
            _vm._v("명 이용\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("100")
            ]),
            _vm._v("명쯤 되면 이제 클라를 분리한다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(
              "\n이런식으로 엔티티를 분리하는게 확장 가능 어플리케이션 빌드하는데 핵심이다"
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n웹"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" 모바일웹"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" ios"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(
              " 안드로이드 등 그냥 같은 api를 쓰는 클라일 뿐이니 다 나눠놓으면 새로운 플랫폼 구축이 쉽다\n\n추가 "
            ),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(":")
            ]),
            _vm._v(" 화면 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("/")
            ]),
            _vm._v(" 서버 도메인도 나눠놓으면 트래픽 관리도 쉬움\n\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("000")
            ]),
            _vm._v("명 이용\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1000")
            ]),
            _vm._v("명쯤 되면 로드밸런서를 추가해준다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n서버를 여러대 두고 요청을 분산해준다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n서버 하나가 뒤져도 다른게 받아주니까 조금 더 안정적임"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("~")
            ]),
            _vm._v("\n자동 확장도 활성화 해주면 편하댄다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("10")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("000")
            ]),
            _vm._v("명 이용\n이미지가 매우 많을거고"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" 그이미지를 서버에 때려박으면 과부하 심하니까\nCDN을 넣자"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n스토리지 서비스를 사용해야한다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("아마존은 s3 뭐 이런거"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(
              "\n일반적으로 API는 이미지 및 이미지 업로드와 같은 작업은 처리하지 않는다"
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("100")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("000")
            ]),
            _vm._v("명 이용\n데이터 베이스를 계층화하자\n캐시쓴다"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("\n읽기 전용 복제본 "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("뷰 말하는듯"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" 틀리면 수정좀"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("을 만든다\n")
          ])
        ])
      ]),
      _c("h2", { attrs: { id: "카프카" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#카프카" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 카프카")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "카프카-구성" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#카프카-구성" } },
          [_vm._v("#")]
        ),
        _vm._v(" 카프카 구성")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("파티션, 레플리카, 오프셋 등등..")]),
        _vm._v(" "),
        _c("li", [_vm._v("리더가 있고, 죽으면 새로운게 리더가 되는등..")]),
        _vm._v(" "),
        _c("li", [_vm._v("서로간에 데이터를 참고하고 있다.")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "카프카를-사용할때-생길-수-있는-문제" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#카프카를-사용할때-생길-수-있는-문제" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 카프카를 사용할때 생길 수 있는 문제")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("중복 처리를 해 주어야 한다.")]),
        _vm._v(" "),
        _c("li", [_vm._v("순서 보장이 어렵다 (할 순 있음. 키줘서)")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "카프카를-사용했을-때-장점" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#카프카를-사용했을-때-장점" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 카프카를 사용했을 때 장점")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "두 개의 시스템 사이에서 비동기로 데이터를 주고받는 창구가 된다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "만약 api의 경우, 한쪽이 죽으면 다른쪽에선 에러가 나지만, 카프카를 사용하면 보내는쪽은 카프카로 보내고, 받는쪽이 죽어도 아무런 문제가 안됨."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "이게 여러개의 시스템이 얽혀있으면, 하나만 죽어도 여러 시스템이 죽을 수 있다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "이런 경우 가운데에 카프카를 통해 데이터를 전달하고 받고 하면, 깔끔한 구조가 된다"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("결국 메세지 브로커")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "주키퍼" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#주키퍼" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 주키퍼")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("간단하게는 카프카 설정을 해주는 거라고 보면 될듯")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "카프카-스트림즈" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#카프카-스트림즈" } },
          [_vm._v("#")]
        ),
        _vm._v(" 카프카 스트림즈")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("카프카 데이터를 정제해서 쓸 수 있는 라이브러리")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "컨슘해서 바로 처리하는거보다 더 다양한 기능들을 제공해주고, DB화 시킬 수도 있고.."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("KTable 처럼 테이블같은 데이터 형태로도 나타내 줄 수 있다.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("KTable은 중복 없이, 단순 데이터 distinct가 가능하다.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "예를들어 KStream은 총 9번의 레코드를 출력하지만, KTable은 이전 레코드를 덮어써서 3건의 레코드만 출력한다."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("윈도 작업을 통해, 시간별로 묶는거도 가능")]),
        _vm._v(" "),
        _c("li", [_vm._v("즉 데이터 정제를 엄청나게 세세하게 해줄 수 있다.")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "msa" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#msa" } }, [
          _vm._v("#")
        ]),
        _vm._v(" msa")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("카프카 스트림즈를 통한 msa를 해봄")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "이벤트 드리븐 방식 -> 카프카에 데이터가 쌓이고 (이벤트 loop 역할), 각 서비스에 이벤트 핸들러를 만들어, 특정 필요한 이벤트가 들어오면 해당 이벤트를 받아 처리한다. (메세지)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("데이터 저장소 역할을 카프카 스트림즈로 한다.")]),
        _vm._v(" "),
        _c("li", [_vm._v("functional endpoint 사용")]),
        _vm._v(" "),
        _c("li", [_vm._v("CUD는 카프카로 데이터를 프로듀스 해준다.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "이벤트 동작은, 특정 이벤트가 왔을때, 그 이벤트를 캐치(컨슘) 해서 새로운 이벤트를 만들어 준다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Read는 카프카 스트림즈로 데이터를 정제한다. 여러 팟이 뜨는데 각각의 팟에 다른 데이터들이 있고, 없는 데이터는 락스 디비 fetch 해줘서 데이터를 가져온다."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "만약 로컬이 죽으면, 카프카 스트림즈를 통해 데이터를 다시 갖고와 락스 디비에 세팅해준다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "reactive-programming" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#reactive-programming" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Reactive Programming")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "리액티브" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#리액티브" } },
          [_vm._v("#")]
        ),
        _vm._v(" 리액티브")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "“리액티브”라는 단어는 I/O 이벤트에 반응하는 네트워크 컴포넌트, 마우스 이벤트에 반응하는 UI 컨트롤러 등 어떤 변화에 반응하는 것을 아우르는 프로그래밍 모델을 뜻한다."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "함수형-프로그래밍이란" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#함수형-프로그래밍이란" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 함수형 프로그래밍이란?")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "함수형 프로그래밍이란 어떤 문제를 해결하기 위한 과정이나 공식에 치중하는게 아닌 이미 만들어진 함수를 활용하는 방법"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "스프링-웹플럭스" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#스프링-웹플럭스" } },
          [_vm._v("#")]
        ),
        _vm._v(" 스프링 웹플럭스")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Mono, Flux 개념 -> Produce 개념인듯.. 이거로 리턴하면 스프링은 Observing 하면서 보고 처리를 진행"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("다수 리퀘스트를 처리할 때 좋다.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("만약 내부에 하나라도 블록킹 방식이 있으면 효율성이 떨어진다")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("네티를 많이쓴다.")]),
        _vm._v(" "),
        _c("li", [_vm._v("request가 많을수록 효과가 극명하다.")]),
        _vm._v(" "),
        _c("li", [_vm._v("동시성 활용")])
      ]),
      _vm._v(" "),
      _c("hr"),
      _vm._v(
        "\n- Publisher 의 구현체인 Mono와 Flux 를 활용하여 데이터를 발행하는 객체를 만들고 Controller 로 리턴을 하면 Spring 에서 알아서 subscribe 하도록 되어 있다. \n- 즉, Controller 에서 각 명령을 실행 한다기 보다, 데이터 발행하는 Publisher 를 만드는 코드를 작성하도록 접근을 해야 한다.\n"
      ),
      _c("h2", { attrs: { id: "디자인-패턴" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#디자인-패턴" } },
          [_vm._v("#")]
        ),
        _vm._v(" 디자인 패턴")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "빌더-패턴" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#빌더-패턴" } },
          [_vm._v("#")]
        ),
        _vm._v(" 빌더 패턴")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("필드의 수가 많을때 사용하는 패턴")]),
        _vm._v(" "),
        _c("li", [_vm._v("오류 체크도 가능")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "스트레티지-패턴" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#스트레티지-패턴" } },
          [_vm._v("#")]
        ),
        _vm._v(" 스트레티지 패턴")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "지정된 알고리즘의 세부 구현을 변경할 필요 없이 쉽게 교환할 수 있게 해주는 디자인 패턴"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("DI라고 보면될듯")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "템플릿-메소드-패턴" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#템플릿-메소드-패턴" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 템플릿 메소드 패턴")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "공통 기능은 상위 클래스에서 구현하고, 나머지는 다 하위 클래스에 위임하는 패턴"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("JDBC Template 같은거")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "데코레이터-패턴" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#데코레이터-패턴" } },
          [_vm._v("#")]
        ),
        _vm._v(" 데코레이터 패턴")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "기 구현된 구조에서 새로운 기능을 추가할 때, 중복적으로 추가하기 싫은 경우에 쓰기 좋음"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "플라이웨이트-패턴" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#플라이웨이트-패턴" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 플라이웨이트 패턴")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Integer.valueOf 같은거.")]),
        _vm._v(" "),
        _c("li", [_vm._v("캐싱해서 쓰는거다")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "싱글톤" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#싱글톤" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 싱글톤")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("하나의 인스턴스만 생성하는 것을 보장하는 패턴")])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}