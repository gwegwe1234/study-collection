{"remainingRequest":"/Users/ted/github/study-collection/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ted/github/study-collection/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/ted/github/study-collection/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/ted/github/study-collection/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/ted/github/study-collection/docs/book/windows-system-programming/05.md?vue&type=template&id=0a7f8f5e&","dependencies":[{"path":"/Users/ted/github/study-collection/docs/book/windows-system-programming/05.md","mtime":1634263658334},{"path":"/Users/ted/github/study-collection/node_modules/cache-loader/dist/cjs.js","mtime":1634263668857},{"path":"/Users/ted/github/study-collection/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634263671297},{"path":"/Users/ted/github/study-collection/node_modules/cache-loader/dist/cjs.js","mtime":1634263668857},{"path":"/Users/ted/github/study-collection/node_modules/vue-loader/lib/index.js","mtime":1634263671296},{"path":"/Users/ted/github/study-collection/node_modules/@vuepress/markdown-loader/index.js","mtime":1634263668561}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}