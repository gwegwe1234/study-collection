(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{275:function(t,a,s){t.exports=s.p+"assets/img/ks_4_1.f7602017.jpg"},276:function(t,a,s){t.exports=s.p+"assets/img/ks_4_2.59710c49.jpg"},277:function(t,a,s){t.exports=s.p+"assets/img/ks_4_3.5d54f1ad.jpg"},278:function(t,a,s){t.exports=s.p+"assets/img/ks_4_4.3c3342d7.jpg"},279:function(t,a,s){t.exports=s.p+"assets/img/ks_4_5.9571fdac.jpg"},280:function(t,a,s){t.exports=s.p+"assets/img/ks_4_6.99c4ce7b.jpg"},281:function(t,a,s){t.exports=s.p+"assets/img/ks_4_7.51b22705.jpg"},522:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_4강"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4강"}},[t._v("#")]),t._v(" 4강")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#_1-이벤트"}},[t._v("1. 이벤트")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-1-스트림은-상태가-필요하다"}},[t._v("1-1. 스트림은 상태가 필요하다")])])])]),n("li",[n("a",{attrs:{href:"#_2-카프카-스트림즈에-상태를-가진-작업-적용하기"}},[t._v("2. 카프카 스트림즈에 상태를 가진 작업 적용하기")]),n("ul",[n("li",[n("a",{attrs:{href:"#_2-1-transformvalues-프로세서"}},[t._v("2-1. transformValues 프로세서")])]),n("li",[n("a",{attrs:{href:"#_2-2-고객-보상의-상태-유지"}},[t._v("2-2. 고객 보상의 상태 유지")])]),n("li",[n("a",{attrs:{href:"#_2-3-값-변환기-초기화"}},[t._v("2-3. 값 변환기 초기화")])]),n("li",[n("a",{attrs:{href:"#_2-4-상태를-사용해-purchase-객체를-rewardaccumulator에-매핑하기"}},[t._v("2-4. 상태를 사용해 Purchase 객체를 RewardAccumulator에 매핑하기")])]),n("li",[n("a",{attrs:{href:"#_2-5-보상-프로세서-업데이트"}},[t._v("2-5. 보상 프로세서 업데이트")])])])]),n("li",[n("a",{attrs:{href:"#_3-조회와-이전에-본-데이터에-상태-저장소-사용하기"}},[t._v("3. 조회와 이전에 본 데이터에 상태 저장소 사용하기")]),n("ul",[n("li",[n("a",{attrs:{href:"#_3-1-데이터-지역성"}},[t._v("3-1. 데이터 지역성")])]),n("li",[n("a",{attrs:{href:"#_3-2-실패-복구와-내결함성"}},[t._v("3-2. 실패 복구와 내결함성")])])])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"_1-이벤트"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-이벤트"}},[t._v("#")]),t._v(" 1. 이벤트")]),t._v(" "),n("h3",{attrs:{id:"_1-1-스트림은-상태가-필요하다"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-스트림은-상태가-필요하다"}},[t._v("#")]),t._v(" 1-1. 스트림은 상태가 필요하다")]),t._v(" "),n("ul",[n("li",[t._v("스트림 처리에서 추가된 문맥은 상태(state) 라고 부른다.")]),t._v(" "),n("li",[t._v("상태와 스트림 처리의 개념이 서로 상충되는 것처럼 보일 수 있지만, 스트림 처리는 서로 관련이 없으며 발생했을 때 처리될 필요가 있는 개별 이벤트의 지속적인 흐름을 의미한다.")]),t._v(" "),n("li",[t._v("상태의 개념은 데이터베이스 테이블 같은 정적 리소스 이미지를 생각하면 된다.")])]),t._v(" "),n("h2",{attrs:{id:"_2-카프카-스트림즈에-상태를-가진-작업-적용하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-카프카-스트림즈에-상태를-가진-작업-적용하기"}},[t._v("#")]),t._v(" 2. 카프카 스트림즈에 상태를 가진 작업 적용하기")]),t._v(" "),n("ul",[n("li",[t._v("기존 구조는 다음과 같다.")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(275),alt:"ks"}})]),t._v(" "),n("ul",[n("li",[t._v("위의 그림에서, 보상은 단일 트랜잭션에 대한 보상만 처리해서 결과를 전달해 준다.")]),t._v(" "),n("li",[t._v("프로세서에 상태를 추가한 경우 보상 포인트의 누적 수의 추적이 가능하다.")]),t._v(" "),n("li",[t._v("transformValues를 사용해 상태가 없는 보상 프로세서를 상태가 있는 프로세서로 변환해 보면 된다.")]),t._v(" "),n("li",[t._v("컨슈머에게 더 많은 정보를 주기 위해, 총 보너스 포인트와 구매간 걸린 시간을 추적한다.")])]),t._v(" "),n("h3",{attrs:{id:"_2-1-transformvalues-프로세서"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-transformvalues-프로세서"}},[t._v("#")]),t._v(" 2-1. transformValues 프로세서")]),t._v(" "),n("ul",[n("li",[t._v("가장 기본적인 상태 유지 함수는 KStream.transformValues 이다.")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(276),alt:"ks"}})]),t._v(" "),n("ul",[n("li",[t._v("transformValues 프로세서는 로컬 상태에 저장된 정보를 사용하여 들어오는 레코드를 업데이트한다.")]),t._v(" "),n("li",[t._v("위의 경우 고객 ID는 주어진 레코드의 상태를 검색하고 저장하는 데 사용한다.")]),t._v(" "),n("li",[t._v("이 메소드는 의미상으론 KStream.mapValues()와 동일하지만, transformValues가 StateStore 인스턴스에 접근해 작업을 완료하는 차이접이 있다.")])]),t._v(" "),n("h3",{attrs:{id:"_2-2-고객-보상의-상태-유지"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-고객-보상의-상태-유지"}},[t._v("#")]),t._v(" 2-2. 고객 보상의 상태 유지")]),t._v(" "),n("ul",[n("li",[t._v("기존의 보상 프로세서는, KStream.mapValues() 메소드를 사용해 들어오는 Purchase 객체를 RewardAccumulator 객체로 매핑했다.")]),t._v(" "),n("li",[t._v("RewardAccumulator 객체는 원래 트랜잭션의 고객 ID와 구매 총계라는 2개의 필드로 구성됐다.")]),t._v(" "),n("li",[t._v("요구사항이 변경 되었으니, 포인트는 지마트 보상 프로그램과 연관된다.")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardAccumulator")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" customerId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 고객 ID")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" puchaseTotal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 총 구매 금액")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" currentRewardPoints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 현재 보상 포인트")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("어플리케이션이 보상 토픽에서 레코드를 읽으면 컨슈머 어플리케이션은 보상을 분배하기 위해 총 포인트가 임곗값을 초과하는지 여부만 확인해 주면 된다.")]),t._v(" "),n("li",[t._v("2개의 필드 totalRewardPoint와 daysFromLastPurchase를 추가해준다.")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardAccumulator")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" customerId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" puchaseTotal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" currentRewardPoints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" daysFromLastPurchase"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" totalRewardPoints"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 총점을 추적하기 위해 추가된 필드")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("토폴로지 전체 구조는 따로 바뀌지 않지만, KStream.mapValues() 메소드 대신 KStream.transformValues() 메소드를 사용한다.")]),t._v(" "),n("li",[t._v("두 가지 단계를 수행한다.\n"),n("ul",[n("li",[t._v("값 변환기를 초기화 한다.")]),t._v(" "),n("li",[t._v("상태를 사용해 Purchase객체를 RewardAccumulator로 매핑힌다.")])])])]),t._v(" "),n("h3",{attrs:{id:"_2-3-값-변환기-초기화"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-값-변환기-초기화"}},[t._v("#")]),t._v(" 2-3. 값 변환기 초기화")]),t._v(" "),n("ul",[n("li",[t._v("첫 번째 단계는 변환기의 init() 메소드에서 인스턴스 변수를 설정하거나 생성하는 것.")]),t._v(" "),n("li",[t._v("init() 메소드에서 처리 토폴로지를 만들 때 생성된 상태 저장소를 찾는다.")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KeyValueStore")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stateStore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 인스턴스 변수")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" storeName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProcessorContext")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProcessorContext")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ProcessorContext에 로컬 참조 설정")]),t._v("\n    stateStore "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KeyValueStore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStateStore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("storeName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// storeName 변수로 StateStore 인스턴스를 찾음")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("변환기 클래스에서 KeyValueStore 타입으로 형 변환한다.")])]),t._v(" "),n("h3",{attrs:{id:"_2-4-상태를-사용해-purchase-객체를-rewardaccumulator에-매핑하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-상태를-사용해-purchase-객체를-rewardaccumulator에-매핑하기"}},[t._v("#")]),t._v(" 2-4. 상태를 사용해 Purchase 객체를 RewardAccumulator에 매핑하기")]),t._v(" "),n("ul",[n("li",[t._v("프로세서를 초기화 했으므로 상태를 사용해 Purchase 객체를 변환할 수 있다.")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 고객 ID 별로 누적된 포인트가 있는지 확인한다"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 현재 거래에 대한 포인트를 합산하고 합계를 표시한다"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardAccumulator")]),t._v(" 의 보상 포인트를 새로운 총 보상 포인트로 설정한다"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v(" 고객 ID 별로 새 총점을 로컬 상태 저장소에 저장한다"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardAccumulator")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Purchase")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardAccumulator")]),t._v(" rewardAccumulator "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardAccumulator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("builder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// purchase에서 RewardAccumulator 객체 만들기")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" accumulatedSoFar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n        stateStore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rewardAccumulator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCustomerId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 고객 ID로 최신 누적 보상 포인트 가져오기")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("accumulatedSoFar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      rewardAccumulator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRewardPoints")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("accumulatedSoFar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 누적된 숫자가 있으면 현재 합계에 추가")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    stateStore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rewardAccumulator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCustomerId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        rewardAccumulator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalRewardPoints")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 새로운 누적 포인트를 stateStore에 저장")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rewardAccumulator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("transform() 메소드에서 먼저 Purchase 객체를 RewardAccumulator 로 매핑한다.")]),t._v(" "),n("li",[t._v("이후에 변환 과정에서 상태가 들어가게 되는데, 키(고객ID)로 조회를 수행하고, 누적된 포인트에 현재 포인트를 추가해준다.")]),t._v(" "),n("li",[t._v("이후 추가된 총포인트를 상태 저장소에 저장해 준다.")]),t._v(" "),n("li",[t._v("이제 보상 프로세서를 업데이트 해줘야 하는데, 시작하기 전에 고객 ID로 모든 판매에 접근하고 있다는 사실을 고려해야 한다.")]),t._v(" "),n("li",[t._v("주어진 고객에 대한 판매별 정보를 수집한다는 것은 해당 고객에 대한 모든 트랜잭션이 동일한 파티션에 있음을 의미한다.")]),t._v(" "),n("li",[t._v("그런데 처음 카프카로 데이터가 들어갈 때 키가 없이 들어가, 라운드 로빈으로 데이터를 카프카로 할당해 줘서 꼬이는 문제가 발생 할 수 있다.")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(277),alt:"ks"}})]),t._v(" "),n("ul",[n("li",[t._v("즉 토픽이 한개가 아니라면, 키가 채워지지 않은 레코드가 라운드 로빈으로 카프카에 할당이 되고, 주어진 고객에 대한 트랜잭션이 동일한 파티션에 들어가지 않음을 의미한다.")]),t._v(" "),n("li",[t._v("상태 저장소의 ID로 레코드를 조회해야 하기 때문에 동일한 파티션에 동일한 ID로 고객 거래를 배치해야 한다.")]),t._v(" "),n("li",[t._v("그렇지 않으면 여러 파티션에 동일한 ID를 가진 고객이 분산되므로 동일한 고객을 여러 상태 저장소에서 조회해야 한다.")]),t._v(" "),n("li",[t._v("헷갈리면 안되는게, 각 파티션에 자체 상태 저장소가 있는게 아니라 약간 각 파티션마다 저장소 할당영역이 있다고 생각하면 된다.")]),t._v(" "),n("li",[t._v("위의 문제를 해결하는 방법으로는, 고객 ID로 데이터를 다시 분할해 준다.")])]),t._v(" "),n("h4",{attrs:{id:"데이터-리파티셔닝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#데이터-리파티셔닝"}},[t._v("#")]),t._v(" 데이터 리파티셔닝")]),t._v(" "),n("p",[n("img",{attrs:{src:s(278),alt:"ks"}})]),t._v(" "),n("ul",[n("li",[t._v("레코드를 리파티셔닝하려면 먼저 원본 레코드의 키를 변경학거나 바꾼 다음 레코드를 새로운 토픽에 쓴다.")]),t._v(" "),n("li",[t._v("이후에 해당 레코드를 다시 소비해준다.")]),t._v(" "),n("li",[t._v("리파티셔닝의 결과로 해당 레코드가 원래 있던 곳과 다른 파티션애서 올 수도 있다.")])]),t._v(" "),n("h4",{attrs:{id:"카프카-스트림즈의-리파티셔닝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#카프카-스트림즈의-리파티셔닝"}},[t._v("#")]),t._v(" 카프카 스트림즈의 리파티셔닝")]),t._v(" "),n("p",[n("img",{attrs:{src:s(279),alt:"ks"}})]),t._v(" "),n("ul",[n("li",[t._v("카프카 스트림즈에서 리파티셔닝은 KStream.through()를 사용해 쉽게 수행할 수 있다.")]),t._v(" "),n("li",[t._v("KStream.through()는 중간 토픽을 생성하고 현재 KSteam 인스턴스는 해당 토픽에 레코드를 기록한다.")]),t._v(" "),n("li",[t._v("새로운 KStream 인스턴스는 해당 소스에 대해 동일한 중간 토픽을 사용해 through() 메소드 호출로 반환된다.")]),t._v(" "),n("li",[t._v("중간 토픽을 사용하기 위해 내부적으로 싱크 노드와 소스노드를 만든다.")]),t._v(" "),n("li",[t._v("싱크노드는 기존 KStream 인스턴스가 호출하는 자식 프로세서이고, 새로운 KStream 인스턴스는 레코드의 소스로 새로운 소스 노드를 사용한다.")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardStreamPartitioner")]),t._v(" streamPartitioner "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardStreamPartitioner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// StreamPartitioner를 구현한 인스턴스 초기화")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KStream")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Purchase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" transByCustomerStream "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n                purchaseKStream"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("through")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"customer_transactions"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Produced")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringSerde"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                      purchaseSerde"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                      streamPartitioner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// KStream.through로 KStream을 생성")]),t._v("\n")])])]),n("h4",{attrs:{id:"streampartitioner-사용하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#streampartitioner-사용하기"}},[t._v("#")]),t._v(" StreamPartitioner 사용하기")]),t._v(" "),n("ul",[n("li",[t._v("일반적으로 파티션 할당은 객체의 해시값을 구해 파티션 수로 모듈러 연산을 한다.")]),t._v(" "),n("li",[t._v("위의 경우는 Purchase 객체에 있는 고객 ID를 이용해 특정 고객의 모든 데이터가 동일한 상태저장소에 저장되어야 한다.")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardsStreamPartitioner")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StreamPartitioner")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Purchase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("partition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Purchase")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numPartitions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCustomerId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" numPartitions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 고객 ID로 파티션을 결정해 준다.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("이러한 간단한 데모를 보고 리파티셔닝을 남용하면 안된다. 리파티셔닝이 가끔 팔요하긴 하지만, 데이터가 중복되거나 프로세싱 오버헤드가 발생한다. 가능하면 mapValues(), transformValues(), 또는 flatMapValues()의 사용을 권장한다. map(), transform(), flatMap()은 자동으로 리파티셔닝을 유발할 수 있기 때문이다.")])]),t._v(" "),n("h3",{attrs:{id:"_2-5-보상-프로세서-업데이트"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-보상-프로세서-업데이트"}},[t._v("#")]),t._v(" 2-5. 보상 프로세서 업데이트")]),t._v(" "),n("ul",[n("li",[t._v("위처럼 작업을 하고나면, 구매 객체를 고객 ID별로 분할된 토픽에 기록하는 새로운 처리노드를 생성한다.")]),t._v(" "),n("li",[t._v("이 새로운 토픽은 곧 업데이트 되는 보상 프로세서의 소스가 된다.")]),t._v(" "),n("li",[t._v("이제 동일한 아이디를 가진 고객은 같은 상태 저장소를 사용하게 된다.")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(280),alt:"ks"}})]),t._v(" "),n("ul",[n("li",[t._v("KStream.through()를 통해 생성된 새로운 Stream 인스턴스를 사용해 다음 코드로 보상 프로세서를 업데이트하고 상태를 가진 변환 접근법을 사용한다.")]),t._v(" "),n("li",[t._v("즉 순서대로 보면, 마스킹 후에 들어오는 데이터를 쓰루 프로세서를 통해 리파티셔닝을 해서 같은 고객은 같은 파티션으로 모아주고, 보상 프로세서에서 이전 포인트 정보를 알기위해 로컬 스테이트를 추가해 준다.")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KStream")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RewardAccumulator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" statefulRewardAccumulator "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    transByCustomerStream"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transformValues")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PurchaseRewardTransformer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rewardsStateStoreName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        rewardsStateStoreName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 상태를 가진 변환 사용")]),t._v("\nstatefulRewardAccumulator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rewards"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Produced")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringSerde"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                       rewardAccumulatorSerde"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 결과를 토픽에 기록")]),t._v("\n")])])]),n("ul",[n("li",[t._v("KStream.transformValues()를 사용해 상태가 없는 노드에 상태를 가진 프로세싱을 추가해 준다.")])]),t._v(" "),n("h2",{attrs:{id:"_3-조회와-이전에-본-데이터에-상태-저장소-사용하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-조회와-이전에-본-데이터에-상태-저장소-사용하기"}},[t._v("#")]),t._v(" 3. 조회와 이전에 본 데이터에 상태 저장소 사용하기")]),t._v(" "),n("h3",{attrs:{id:"_3-1-데이터-지역성"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-데이터-지역성"}},[t._v("#")]),t._v(" 3-1. 데이터 지역성")]),t._v(" "),n("ul",[n("li",[t._v("키 조회는 일반적으로 매우 빠르지만 원격 저장소를 사용하면 규모가 커지면 병목 현상이 발생해 대기시간이 길어진다.")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(281),alt:"ks"}})]),t._v(" "),n("ul",[n("li",[t._v("위의 그림에서 외부 저장소와 네트워크 통신을 하는 것 보다, 로컬에서 데이터를 가져오기 위한 호출이 훨씬 더 빠르다.")]),t._v(" "),n("li",[t._v("스트리밍 데이터는 수백만, 수억 개의 레코드를 처리하기 때문에 네트워크 지연이 발생할 가능성이 있으면 문제가 심해질 수 있다.")]),t._v(" "),n("li",[t._v("어플리케이션의 각 서버나 노드는 개별 데이터 저장소가 있어야 한다.")])]),t._v(" "),n("h3",{attrs:{id:"_3-2-실패-복구와-내결함성"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-실패-복구와-내결함성"}},[t._v("#")]),t._v(" 3-2. 실패 복구와 내결함성")]),t._v(" "),n("ul",[n("li")])])}),[],!1,null,null,null);a.default=r.exports}}]);